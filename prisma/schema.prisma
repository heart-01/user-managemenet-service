// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum USER_STATUS {
  PENDING
  ACTIVATED
}

enum AUTH_PROVIDER_NAME {
  GOOGLE
  FACEBOOK
  GITHUB
  TWITTER
  EMAIL
}

enum EMAIL_VERIFICATION_ACTION_TYPE {
  REGISTER
  RESETPASSWORD
}

enum POLICY_TYPE {
  PRIVATE
  TERMOFSERVICES
  EMAILMARKETING
}

enum USER_ACTIVITY_LOG_ACTION_TYPE {
  LOGIN
}

model User {
  id                String              @id @default(uuid()) @db.Uuid
  name              String?             @map("name") @db.VarChar(50)
  phoneNumber       String?             @map("phone_number") @db.VarChar(20)
  bio               String?             @map("bio") @db.Text
  username          String?             @unique @map("username") @db.VarChar(50)
  password          String?             @map("password") @db.VarChar(60)
  email             String              @unique @map("email") @db.VarChar(50)
  imageUrl          String?             @map("imageUrl") @db.VarChar(255)
  status            USER_STATUS         @map("status")
  latestLoginAt     DateTime            @default(now()) @map("latest_login_at") @db.Timestamptz(3)
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt         DateTime            @default(now()) @map("updated_at") @db.Timestamptz(3)
  deletedAt         DateTime?           @map("deleted_at") @db.Timestamptz(3)
  AuthProvider      AuthProvider[]
  EmailVerification EmailVerification[]
  UserPolicy        UserPolicy[]

  @@map("users")
}

model AuthProvider {
  id             String             @id @default(uuid()) @db.Uuid
  userId         String?            @map("user_id") @db.Uuid
  authProvider   AUTH_PROVIDER_NAME @map("auth_provider")
  providerUserId String             @unique @map("provider_user_id") @db.VarChar(50)
  providerEmail  String             @map("provider_email") @db.VarChar(50)
  linkedAt       DateTime           @default(now()) @map("linked_at") @db.Timestamptz(3)

  user User? @relation(fields: [userId], references: [id])

  @@map("auth_providers")
}

model EmailVerification {
  token       String                         @id @map("token") @db.Uuid
  userId      String                         @map("user_id") @db.Uuid
  type        EMAIL_VERIFICATION_ACTION_TYPE @map("type")
  createdAt   DateTime                       @default(now()) @map("created_at") @db.Timestamptz(3)
  expiredAt   DateTime                       @map("expired_at") @db.Timestamp(3)
  completedAt DateTime?                      @map("completed_at") @db.Timestamp(3)

  user User @relation(fields: [userId], references: [id])

  @@map("email_verifications")
}

model Policy {
  id         String       @id @default(uuid()) @db.Uuid
  type       POLICY_TYPE  @map("type")
  content    String       @map("content") @db.Text
  version    String       @map("version") @db.VarChar(5)
  createdAt  DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt  DateTime     @default(now()) @map("updated_at") @db.Timestamptz(3)
  UserPolicy UserPolicy[]

  @@map("policies")
}

model UserPolicy {
  id       String   @id @default(uuid()) @db.Uuid
  userId   String   @map("user_id") @db.Uuid
  policyId String   @map("policy_id") @db.Uuid
  agreedAt DateTime @default(now()) @map("agreed_at") @db.Timestamptz(3)

  user   User   @relation(fields: [userId], references: [id])
  policy Policy @relation(fields: [policyId], references: [id])

  @@unique([userId, policyId])
  @@map("user_policies")
}

model UserActivityLog {
  id            String                        @id @default(uuid()) @db.Uuid
  email         String                        @map("email") @db.VarChar(50)
  loginTime     DateTime                      @map("login_time") @db.Timestamp(3)
  ipAddress     String?                       @map("ip_address") @db.VarChar(50)
  location      String?                       @map("location") @db.VarChar(50)
  userAgent     String?                       @map("user_agent") @db.VarChar(50)
  status        Int                           @map("status")
  action        USER_ACTIVITY_LOG_ACTION_TYPE @map("action")
  failureReason String?                       @map("failure_reason") @db.VarChar(255)
  createdAt     DateTime                      @map("created_at") @db.Timestamp(3)

  @@map("user_activity_log")
}
